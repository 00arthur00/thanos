<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thanos - Highly available Prometheus setup with long term storage capabilities</title>
    <link>http://example.org/</link>
    <description>Recent content on Thanos - Highly available Prometheus setup with long term storage capabilities</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>http://example.org/components/bucket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/components/bucket/</guid>
      <description>Bucket The bucket component of Thanos is a set of commands to inspect data in object storage buckets. It is normally run as a stand alone command to aid with troubleshooting.
Example:
$ thanos bucket verify --objstore.config-file=bucket.yml  The content of bucket.yml:
type: GCS config: bucket: example-bucket  Bucket can be extended to add more subcommands that will be helpful when working with object storage buckets by adding a new command within /cmd/thanos/bucket.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/components/compact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/components/compact/</guid>
      <description>Compact The compactor component of Thanos applies the compaction procedure of the Prometheus 2.0 storage engine to block data stored in object storage. It is generally not semantically concurrency safe and must be deployed as a singleton against a bucket.
Example:
$ thanos compact --data-dir /tmp/thanos-compact --objstore.config-file=bucket.yml  The content of bucket.yml:
type: GCS config: bucket: example-bucket  The compactor needs local disk space to store intermediate data for its processing.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/components/query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/components/query/</guid>
      <description>Query The query component implements the Prometheus HTTP v1 API to query data in a Thanos cluster via PromQL.
It gathers the data needed to evaluate the query from underlying StoreAPIs. See here on how to connect querier with desired StoreAPIs.
Querier currently is fully stateless and horizontally scalable.
$ thanos query \ --http-address &amp;quot;0.0.0.0:9090&amp;quot; \ --store &amp;quot;&amp;lt;store-api&amp;gt;:&amp;lt;grpc-port&amp;gt;&amp;quot; \ --store &amp;quot;&amp;lt;store-api2&amp;gt;:&amp;lt;grpc-port&amp;gt;&amp;quot; \  Deduplication The query layer can deduplicate series that were collected from high-availability pairs of data sources such as Prometheus.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/components/rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/components/rule/</guid>
      <description>Rule NOTE: The rule component is experimental since it has conceptual tradeoffs that might not be favorable for most use cases. It is recommended to keep deploying rules to the relevant Prometheus servers.
The rule component should in particular not be used to circumvent solving rule deployment properly at the configuration management level.
The rule component evaluates Prometheus recording and alerting rules against random query nodes in its cluster. Rule results are written back to disk in the Prometheus 2.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/components/sidecar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/components/sidecar/</guid>
      <description>Sidecar The sidecar component of Thanos gets deployed along with a Prometheus instance. It implements Thanos&amp;rsquo; Store API on top of Prometheus&amp;rsquo; remote-read API and advertises itself as a data source to the cluster. Thereby queriers in the cluster can treat Prometheus servers as yet another source of time series data without directly talking to its APIs. Additionally, the sidecar uploads TSDB blocks to an object storage bucket as Prometheus produces them.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/components/store/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/components/store/</guid>
      <description>Store The store component of Thanos implements the Store API on top of historical data in an object storage bucket. It acts primarily as an API gateway and therefore does not need significant amounts of local disk space. It joins a Thanos cluster on startup and advertises the data it can access. It keeps a small amount of information about all remote blocks on local disk and keeps it in sync with the bucket.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/design/</guid>
      <description>Design Thanos is a set of components that can be composed into a highly available Prometheus setup with long term storage capabilities. Its main goals are operation simplicity and retaining of Prometheus&amp;rsquo;s reliability properties.
The Prometheus metric data model and the 2.0 storage format (spec, slides) are the foundational layers of all components in the system.
Architecture Thanos is a clustered system of components with distinct and decoupled purposes. Clustered components can be categorized as follows:</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/proposals/approved/201809_gossip-removal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/proposals/approved/201809_gossip-removal/</guid>
      <description>Deprecated gossip clustering in favor of File SD Status: draft | in-review | rejected | accepted | complete
Implementation Owner: @bplotka
Ticket: https://github.com/improbable-eng/thanos/issues/484
Summary It is becoming clear that we need to remove gossip protocol as our main way of communication between Thanos Querier and other components. Static configuration seems to be well enough for our simple use cases. To give users more flexibility (similar to gossip auto-join logic), we already wanted to introduce a File SD that allows changing StoreAPIs on-the-fly.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/proposals/approved/201812_thanos-remote-receive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/proposals/approved/201812_thanos-remote-receive/</guid>
      <description>Thanos Remote Write Status: draft | in-review | rejected | accepted | complete
Implementation Owner: @brancz
Summary This document describes the motivation and design of the Thanos receiver component, as well as how it fits into the rest of the Thanos ecosystem and components.
Motivation The Thanos receiver is the missing piece within Thanos in order to use it to build Prometheus as a Service offering, either as an internal service to the rest of an organization or as an actual pay-as-you-go off the shelf service.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/proposals/approved/201901-read-write-operations-bucket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/proposals/approved/201901-read-write-operations-bucket/</guid>
      <description>Read-Write coordination free operational contract for object storage Status: draft | in-review | rejected | accepted | complete
Implementation Owner: @bwplotka
Tickets: * https://github.com/improbable-eng/thanos/issues/298 (eventual consistency) * https://github.com/improbable-eng/thanos/issues/377 (eventual consistency &amp;amp; partial upload) * https://github.com/improbable-eng/thanos/issues/564 (retention vs store gateway) * https://github.com/improbable-eng/thanos/issues/271 (adapt for removals faster)
Summary Our goals here are:
 A) Define consistent way of having multiple readers and multiple writers (technically multiple appenders and single remover) on shared object storage that can be eventual consistent.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/proposals/rejected/201807_store_instance_high_availability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/proposals/rejected/201807_store_instance_high_availability/</guid>
      <description>High-availability for store instances Status: draft | in-review | rejected | accepted | complete
Proposal author: @mattbostock Implementation owner: @mattbostock
Status: Rejected This proposal makes total sense and solves our goals when using gossip. However there exists a very easy solution to this problem in form of using just static entry with any loadbalancer like Kubernetes Service to load balance through different Store Gateways. Those are technically stateless, so request can fetch the data independently.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/proposals/rejected/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/proposals/rejected/config/</guid>
      <description>Thanos Cluster Configuration Status: draft | in-review | rejected | accepted | complete
Implementation Owner: @domgreen
Summary The proposal of creating a central configuration component within Thanos has been rejected by the community as the requirements are specific to the use case at Improbable and that adding configuration management into Thanos will result in adding more knowledge to the system about what the scrapers are doing and their targets.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/release_process/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/release_process/</guid>
      <description>Releases This page describes the release process for Thanos project.
NOTE: As Semantic Versioning states all 0.y.z releases can contain breaking changes in API (flags, grpc API, any backward compatibility)
Cadence We aim for at least 1 release per 6 weeks. However, no strict dates are planned.
No release candidates are required until major version.
Additionally we aim for master branch being stable.
Cutting individual release Process of cutting a new minor Thanos release:</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/service_discovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/service_discovery/</guid>
      <description>Thanos Service Discovery Service discovery has a vital place in Thanos components. It allows Thanos to discover different set API targets required to perform certain operations. This logic is meant to replace Gossip that is planned to be removed.
Currently places that uses Thanos SD: * Thanos Query needs to know about StoreAPI servers in order to query metrics from them. * Thanos Rule needs to know about QueryAPI servers in order to evaluate recording and alerting rules.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/storage/</guid>
      <description>Object Storage Thanos supports any object stores that can be implemented against Thanos objstore.Bucket interface
All clients are configured using --objstore.config-file to reference to the configuration file or --objstore.config to put yaml config directly.
Implementations Current object storage client implementations:
   Provider Maturity Auto-tested on CI Maintainers     Google Cloud Storage Stable (production usage) yes @bwplotka   AWS S3 Beta (working PoCs, testing usage) no @bwplotka   Azure Storage Account Alpha yes @vglafirov   OpenStack Swift Beta (working PoCs, testing usage) no @sudhi-vm   Tencent COS Beta (testing usage) no @jojohappy    NOTE: Currently Thanos requires strong consistency (write-read) for object store implementation.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/troubleshooting/dev/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/troubleshooting/dev/</guid>
      <description>Troubleshooting for dev workflow Dep grouped write of manifest, lock and vendor: scratch directory ... already exists, please remove it Outcome: make deps fails with output: grouped write of manifest, lock and vendor: scratch directory $GOPATH/src/github.com/improbable-eng/thanos/.vendor-new already exists, please remove it
Reason: dep interrupted in the middle of processing.
Fix: rm -rf $GOPATH/src/github.com/improbable-eng/thanos/.vendor-new
Dep failed to unpack tree object Outcome: make deps fails with output: grouped write of manifest, lock and vendor: failed to export github.</description>
    </item>
    
    <item>
      <title>getting-started</title>
      <link>http://example.org/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/getting_started/</guid>
      <description>Getting started Thanos provides a global query view, data backup, and historical data access as its core features in a single binary. All three features can be run independently of each other. This allows you to have a subset of Thanos features ready for immediate benefit or testing, while also making it flexible for gradual roll outs in more complex environments.
In this quick-start guide, we will configure Thanos and all components mentioned to work against a Google Cloud Storage bucket.</description>
    </item>
    
  </channel>
</rss>